# TODO: Display results in table as they come in, one by one.
# TODO: Put response code/size/etc in results
# TODO: Implement option for parallel requests
# TODO: Weight column widths, if possible

from burp import (IBurpExtender, ITab, IContextMenuFactory,
                  IMessageEditorController)

from collections import Counter
import re
from thread import start_new_thread
from time import time

from javax.swing import (JTabbedPane, JPanel, JLabel, Box, JTextField,
                         JTextArea, JCheckBox, JMenuItem, JButton, JTable,
                         JScrollPane, JProgressBar)
from javax.swing.table import DefaultTableModel, DefaultTableCellRenderer
from java.awt import Color, GridBagLayout, GridBagConstraints, Insets

EXTENSION_NAME = "Multi-Time Based Attacker"
INSTRUCTIONS = (
    "<html>" +
    "<h1>" + EXTENSION_NAME + "</h1>"
    "<h2>About this extension</h2>" +
    EXTENSION_NAME + " is a Burp extension that can be used to perform timing "
    "attacks over an unreliable network such as the internet. The attack mode "
    "is similar to the \"sniper\" mode in burp intruder, but instead of "
    "sending a single request for every payload, it is able to send multiple "
    "requests for each payload and show the minimum and maximum times taken "
    "to receive a response as well as showing average times.<br><br>"
    "The extension sends HTTP(S) requests sequentially to reduce the chance "
    "affecting the time the server takes to respond by overloading it.<br><br>"
    "<h2>Using this extension</h2>"
    "<ol><li>Start by sending a request to the extension by right clicking on "
    "a request anywhere in Burp and choosing \"Send To " + EXTENSION_NAME +
    "\" This will populate the \"Target\" tab in the extension.</li>"
    "<li>Select the parts of the request that should be replaced with the "
    "payloads then click the \"Add Payload At Position\" button. This will "
    "add symbols at the start and end positions where the payload will be "
    "inserted.</li>"
    "<li>Choose how many requests to make for each payload</li>"
    "<li>Type or copy/paste the payloads into the \"Payloads\" text area. "
    "Place a single payload on each new line.</li>"
    "<li>Hit the \"Start Attack\" button. Results will be displayed in the "
    "results tab</li></ol>"
    "<h2>Troubleshooting</h2>"
    "Extensions such as Logger++ (available from the BApp store) will show "
    "requests and responses that have been generated by this extension.<br>"
    "<br>"
    "This extension was written by "
    "<a href=\"mailto:graeme.robinson@mwrinfosecurity.com\">"
    "graeme.robinson@mwrinfosecurity.com</a>"
    "</html>"
)

def mean(values):
    return sum(values) / len(values)

def median(values):
    l = len(values)
    values.sort()
    if l % 2 != 0:
        # Odd number of values, so chose middle one
        return values[l//2]
    else:
        # Even number of values, so mean of middle two
        return mean([values[l//2], values[(l//2)-1]])

def mode(values):
    c = Counter(values)
    modes = [str(k) for k, v in c.items() if v == max(c.values())]
    return ", ".join(modes)

class BurpExtender(IBurpExtender, ITab, IContextMenuFactory, IMessageEditorController):

    # Implement IBurpExtender
    def registerExtenderCallbacks(self, callbacks):

        callbacks.registerContextMenuFactory(self)

        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()

        callbacks.setExtensionName(EXTENSION_NAME)

        # Construct UI

        self._tabbedPane = JTabbedPane()

        insets = Insets(3, 3, 3, 3)

        # Target Panel
        attackPanel = JPanel(GridBagLayout())

        targetHeadingLabel = JLabel("<html><b>Target</b></html>")
        targetHeadingLabelConstraints = GridBagConstraints()
        targetHeadingLabelConstraints.gridx = 0
        targetHeadingLabelConstraints.gridy = 0
        targetHeadingLabelConstraints.gridwidth = 4
        targetHeadingLabelConstraints.anchor = GridBagConstraints.LINE_START
        targetHeadingLabelConstraints.insets = insets
        attackPanel.add(targetHeadingLabel, targetHeadingLabelConstraints)

        startAttackButton = JButton(
            "<html><b>Start Attack</b></html>", actionPerformed=self._startAttack)
        startAttackButtonConstraints = GridBagConstraints()
        startAttackButtonConstraints.gridx = 4
        startAttackButtonConstraints.gridy = 0
        startAttackButtonConstraints.insets = insets
        attackPanel.add(startAttackButton, startAttackButtonConstraints)

        hostLabel = JLabel("Host:")
        hostLabelConstraints = GridBagConstraints()
        hostLabelConstraints.gridx = 0
        hostLabelConstraints.gridy = 1
        hostLabelConstraints.anchor = GridBagConstraints.LINE_START
        hostLabelConstraints.insets = insets
        attackPanel.add(hostLabel, hostLabelConstraints)

        self._hostTextField = JTextField(25)
        self._hostTextField.setMinimumSize(
            self._hostTextField.getPreferredSize());
        hostTextFieldConstraints = GridBagConstraints()
        hostTextFieldConstraints.gridx = 1
        hostTextFieldConstraints.gridy = 1
        hostTextFieldConstraints.weightx = 1
        hostTextFieldConstraints.gridwidth = 2
        hostTextFieldConstraints.anchor = GridBagConstraints.LINE_START
        hostTextFieldConstraints.insets = insets
        attackPanel.add(self._hostTextField, hostTextFieldConstraints)

        portLabel = JLabel("Port:")
        portLabelConstraints = GridBagConstraints()
        portLabelConstraints.gridx = 0
        portLabelConstraints.gridy = 2
        portLabelConstraints.anchor = GridBagConstraints.LINE_START
        portLabelConstraints.insets = insets
        attackPanel.add(portLabel, portLabelConstraints)

        self._portTextField = JTextField(5)
        self._portTextField.setMinimumSize(
            self._portTextField.getPreferredSize());
        portTextFieldConstraints = GridBagConstraints()
        portTextFieldConstraints.gridx = 1
        portTextFieldConstraints.gridy = 2
        portTextFieldConstraints.gridwidth = 2
        portTextFieldConstraints.anchor = GridBagConstraints.LINE_START
        portTextFieldConstraints.insets = insets
        attackPanel.add(self._portTextField, portTextFieldConstraints)

        self._protocolCheckBox = JCheckBox("Use HTTPS")
        protocolCheckBoxConstraints = GridBagConstraints()
        protocolCheckBoxConstraints.gridx = 0
        protocolCheckBoxConstraints.gridy = 3
        protocolCheckBoxConstraints.gridwidth = 3
        protocolCheckBoxConstraints.anchor = GridBagConstraints.LINE_START
        protocolCheckBoxConstraints.insets = insets
        attackPanel.add(self._protocolCheckBox, protocolCheckBoxConstraints)

        requestHeadingLabel = JLabel("<html><b>Request</b></html>")
        requestHeadingLabelConstraints = GridBagConstraints()
        requestHeadingLabelConstraints.gridx = 0
        requestHeadingLabelConstraints.gridy = 4
        requestHeadingLabelConstraints.gridwidth = 4
        requestHeadingLabelConstraints.anchor = GridBagConstraints.LINE_START
        requestHeadingLabelConstraints.insets = insets
        attackPanel.add(requestHeadingLabel, requestHeadingLabelConstraints)

        self._messageEditor = callbacks.createMessageEditor(self, True)
        messageEditorComponent = self._messageEditor.getComponent()
        messageEditorComponentConstraints = GridBagConstraints()
        messageEditorComponentConstraints.gridx = 0
        messageEditorComponentConstraints.gridy = 5
        messageEditorComponentConstraints.weightx = 1
        messageEditorComponentConstraints.weighty = .75
        messageEditorComponentConstraints.gridwidth = 4
        messageEditorComponentConstraints.gridheight = 2
        messageEditorComponentConstraints.fill = GridBagConstraints.BOTH
        messageEditorComponentConstraints.insets = insets
        attackPanel.add(messageEditorComponent, messageEditorComponentConstraints)

        addPayloadButton = JButton(
            "Add \xa7", actionPerformed=self._addPayload)
        addPayloadButtonConstraints = GridBagConstraints()
        addPayloadButtonConstraints.gridx = 4
        addPayloadButtonConstraints.gridy = 5
        addPayloadButtonConstraints.fill = GridBagConstraints.HORIZONTAL
        addPayloadButtonConstraints.insets = insets
        attackPanel.add(addPayloadButton, addPayloadButtonConstraints)

        clearPayloadButton = JButton(
            "Clear \xa7", actionPerformed=self._clearPayloads)
        clearPayloadButtonConstraints = GridBagConstraints()
        clearPayloadButtonConstraints.gridx = 4
        clearPayloadButtonConstraints.gridy = 6
        clearPayloadButtonConstraints.anchor = GridBagConstraints.PAGE_START
        clearPayloadButtonConstraints.fill = GridBagConstraints.HORIZONTAL
        clearPayloadButtonConstraints.insets = insets
        attackPanel.add(clearPayloadButton, clearPayloadButtonConstraints)

        payloadHeadingLabel = JLabel("<html><b>Payloads<b></html>")
        payloadHeadingLabelConstraints = GridBagConstraints()
        payloadHeadingLabelConstraints.gridx = 0
        payloadHeadingLabelConstraints.gridy = 7
        payloadHeadingLabelConstraints.gridwidth = 4
        payloadHeadingLabelConstraints.anchor = GridBagConstraints.LINE_START
        payloadHeadingLabelConstraints.insets = insets
        attackPanel.add(payloadHeadingLabel, payloadHeadingLabelConstraints)

        self._payloadTextArea = JTextArea()
        payloadScrollPane = JScrollPane(self._payloadTextArea)
        payloadScrollPaneConstraints = GridBagConstraints()
        payloadScrollPaneConstraints.gridx = 0
        payloadScrollPaneConstraints.gridy = 8
        payloadScrollPaneConstraints.weighty = .25
        payloadScrollPaneConstraints.gridwidth = 3
        payloadScrollPaneConstraints.fill = GridBagConstraints.BOTH
        payloadScrollPaneConstraints.insets = insets
        attackPanel.add(payloadScrollPane, payloadScrollPaneConstraints)

        requestsNumberLabel = JLabel("Number of requests for each payload:")
        requestsNumberLabelConstraints = GridBagConstraints()
        requestsNumberLabelConstraints.gridx = 0
        requestsNumberLabelConstraints.gridy = 9
        requestsNumberLabelConstraints.gridwidth = 2
        requestsNumberLabelConstraints.anchor = GridBagConstraints.LINE_START
        requestsNumberLabelConstraints.insets = insets
        attackPanel.add(requestsNumberLabel, requestsNumberLabelConstraints)

        self._requestsNumberTextField = JTextField("5", 4)
        self._requestsNumberTextField.setMinimumSize(
            self._requestsNumberTextField.getPreferredSize())
        requestsNumberTextFieldConstraints = GridBagConstraints()
        requestsNumberTextFieldConstraints.gridx = 2
        requestsNumberTextFieldConstraints.gridy = 9
        requestsNumberTextFieldConstraints.anchor = GridBagConstraints.LINE_START
        requestsNumberTextFieldConstraints.insets = insets
        attackPanel.add(self._requestsNumberTextField, requestsNumberTextFieldConstraints)

        # Results Panel
        resultsPanel = JPanel(GridBagLayout())

        self._progressBar = JProgressBar()
        self._progressBar.setMinimum(0)
        progressBarContraints = GridBagConstraints()
        progressBarContraints.gridx = 0
        progressBarContraints.gridy = 0
        progressBarContraints.fill = GridBagConstraints.HORIZONTAL

        resultsPanel.add(self._progressBar, progressBarContraints)

        self._resultsTableModel = DefaultTableModel(
            ["Payload", "Number of Requests", "Status Code",
             "Minimum", "Maximum", "Mean", "Median", "Mode"], 0)
        resultsTable = JTable(self._resultsTableModel)
        resultsTable.setAutoCreateRowSorter(True)
        cellRenderer = ColoredTableCellRenderer()
        for index in [3,4,5,6]:
            column = resultsTable.columnModel.getColumn(index)
            column.cellRenderer = cellRenderer
        resultsScrollPane = JScrollPane(resultsTable)
        resultsScrollPaneConstraints = GridBagConstraints()
        resultsScrollPaneConstraints.gridx = 0
        resultsScrollPaneConstraints.gridy = 1
        resultsScrollPaneConstraints.weightx = 1
        resultsScrollPaneConstraints.weighty = 1
        resultsScrollPaneConstraints.fill = GridBagConstraints.BOTH
        resultsPanel.add(resultsScrollPane, resultsScrollPaneConstraints)

        # Instructions Panel
        instructionsPanel = JPanel(GridBagLayout())
        instructionsLabel = JLabel(INSTRUCTIONS)
        instructionsLabelConstraints = GridBagConstraints()
        instructionsLabelConstraints.weightx = 1
        instructionsLabelConstraints.weighty = 1
        instructionsLabelConstraints.insets = insets
        instructionsLabelConstraints.fill = GridBagConstraints.HORIZONTAL
        instructionsLabelConstraints.anchor = GridBagConstraints.PAGE_START

        instructionsPanel.add(instructionsLabel, instructionsLabelConstraints)

        self._tabbedPane.addTab("Attack", attackPanel)
        self._tabbedPane.addTab("Results", resultsPanel)
        self._tabbedPane.addTab("Instructions", instructionsPanel)

        callbacks.addSuiteTab(self)

    # Implement ITab
    def getTabCaption(self):
        return EXTENSION_NAME

    def getUiComponent(self):
        return self._tabbedPane

    # Implement IMessageEditorController
    def getHttpService(self):
        self._updateClassFromUI()
        return self._httpService

    def getRequest(self):
        # Strangely this doesn't seem necessary; returning None also works.
        self._updateClassFromUI()
        return self._request

    def getResponse(self):
        return None

    # Implement IContextMenuFactory
    def createMenuItems(self, contextMenuInvocation):
        print "Being queried for context menu items"
        messages = contextMenuInvocation.getSelectedMessages()

        # Only add menu item if a single request is selected
        if len(messages) == 1:
            self._contextMenuData = messages
            menu_item = JMenuItem(
                "Send to {}".format(EXTENSION_NAME),
                actionPerformed = self._contextMenuItemClicked
            )
            print "Context menu item added"
            return [menu_item]
        else:
            print "Not adding context menu item this time"

    def _contextMenuItemClicked(self, _):
        print "Context Menu Item Clicked"
        httpRequestResponse = self._contextMenuData[0]

        # Update class variables with request data
        self._httpService = httpRequestResponse.getHttpService()
        self._request = httpRequestResponse.getRequest()

        # Update fields in tab
        self._hostTextField.setText(self._httpService.getHost())
        self._portTextField.setText(str(self._httpService.getPort()))
        self._protocolCheckBox.setSelected(
            True if self._httpService.getProtocol() == "https" else False)
        self._messageEditor.setMessage(self._request, True)

    def _startAttack(self, _):

        print "Attack Start Button Clicked!"

        # Set class variables from values in UI
        self._updateClassFromUI()

        # Clear results table
        self._resultsTableModel.setRowCount(0)

        self._responses = {}
        payloads = set(self._payloads.splitlines())

        # Set progress bar max to number of requests
        self._progressBar.setMaximum(len(payloads) * self._numReq)

        start_new_thread(self._makeHttpRequest, (payloads,))

    def _makeHttpRequest(self, payloads):

        for payload in payloads:
            self._responses[payload] = []
            # Stick payload into request at specified position
            request = re.sub("\xa7[^\xa7]*\xa7", payload, self._request)
            request = self._updateContentLength(request)
            for _ in xrange(self._numReq):
                # Make request and work out how long it took. This method is
                # crude, but it's as good as we can get with current Burp APIs
                # See https://bit.ly/2JX29Nf
                startTime =time()
                response = self._callbacks.makeHttpRequest(
                    self._httpService, request)
                endTime = time()
                duration = endTime - startTime

                self._progressBar.setValue(self._progressBar.getValue() + 1)

                self._responses[payload].append(duration)

                # If all responses for this payload have
                #  been added to array, add to results table.
                if len(self._responses[payload]) == self._numReq:
                    # Add results to results tab
                    results = self._responses[payload]
                    numReqs = self._numReq
                    statusCode = response.getStatusCode()
                    meanTime = mean(results)
                    medianTime = median(results)
                    modeTime = mode(results)
                    minTime = min(results)
                    maxTime = max(results)
                    rowData = [
                        payload, numReqs, statusCode, minTime,
                        maxTime, meanTime, medianTime, modeTime]
                    self._resultsTableModel.addRow(rowData)

    def _updateClassFromUI(self):
        host = self._hostTextField.text
        port = int(self._portTextField.text)
        protocol = "https" if self._protocolCheckBox.isSelected() else "http"
        self._httpService = self._helpers.buildHttpService(host, port, protocol)
        self._request = self._updateContentLength(self._messageEditor.getMessage())
        self._numReq = int(self._requestsNumberTextField.text)
        self._payloads = self._payloadTextArea.text

    def _addPayload(self, _):
        request = self._messageEditor.getMessage()
        selection = self._messageEditor.getSelectionBounds()
        if selection[0] == selection[1]:
            # No text selected so in/out points are same
            request.insert(selection[0], 0xa7)
            request.insert(selection[1], 0xa7)
        else:
            request.insert(selection[0], 0xa7)
            request.insert(selection[1]+1, 0xa7)
        self._messageEditor.setMessage(request, True)

    def _clearPayloads(self, _):
        request = self._messageEditor.getMessage()
        request = self._helpers.bytesToString(request).replace("\xa7", "")
        self._messageEditor.setMessage(request, True)

    def _updateContentLength(self, request):
        # Dirty trick (toggle type twice) to make burp fix the
        # Content-Length header
        request = self._helpers.toggleRequestMethod(request)
        request = self._helpers.toggleRequestMethod(request)
        return request


class ColoredTableCellRenderer(DefaultTableCellRenderer):
    def getTableCellRendererComponent(self, table, value, isSelected, hasFocus, row, column):
        renderer = DefaultTableCellRenderer.getTableCellRendererComponent(self, table, value, isSelected, hasFocus, row, column)
        value = table.getModel().getValueAt(row, column)
        red = value
        green = 1 - value
        color = Color(red, green, 0)
        renderer.background = color
        return renderer
